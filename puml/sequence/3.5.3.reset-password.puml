
@startuml reset_password_sequence
skinparam DefaultFontName "Times New Roman"
skinparam DefaultFontSize 14

title 3.5.3 Reset password sequence

actor User as u
boundary ResetPasswordPage as rp
boundary NewPasswordPage as np
control AuthController as ac
entity UserService as us
entity EmailService as es
database Database as db

opt user want to register
ref over u : 3.5.2. Register sequence
end
opt user want to login
ref over u : 3.5.1 Login sequence
end
u -> rp: open ResetPasswordPage
activate u
activate rp
u -> rp: submit email
rp -> rp: validate email
alt email is invalid
  rp --> u: show error message
else email is valid
  rp -> ac: postDataAPI(email)
  activate ac
  ac -> us: getUserByEmail(email)
  activate us
  us -> db: findOne({email: email})
  activate db
  db --> us: user
  deactivate db
  us --> ac: user
  deactivate us
  alt user is not existed
    ac --> rp: error message
  else user is existed
    ac -> ac: generateToken(user) : token
    ac -> es: sendEmail(user.email, token)
    activate es
    es --> u: email
    deactivate es
    deactivate ac
    deactivate rp
    u -> u: open email
    u -> np: open click on reset password link
    activate np
    ref over u, np : 3.5.4. Verify token sequence: result
    alt result is success 
      np -> np: show reset password form
      u -> np: submit new password
      np -> np: validate new password
      alt new password is invalid
        np --> u: show error message
      else new password is valid
        np -> ac: postDataAPI(newPassword)
        activate ac
        ac -> ac: validateToken(token): email, old_password
        ac -> us: getUserByEmail(email)
        activate us
        us -> db: findOne({email: email})
        activate db
        db --> us: user
        deactivate db
        us --> ac: user
        deactivate us
        ac -> ac: comparePassword(old_password, user.password)
        alt password is incorrect
          ac --> np: error message
          np -> np: show error message
        else password is correct
          ac ->  us: updatePassword(user.id, newPassword)
          activate us
          us -> db: update
          activate db
          db --> us: result
          deactivate db
          us --> ac: result
          deactivate us
          ac --> np: result
          deactivate ac
          np --> u: redirect to login page
          deactivate np
          deactivate u
        end
      end
    end
  end
end


@enduml
